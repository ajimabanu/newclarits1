{"ast":null,"code":"var _jsxFileName = \"D:\\\\newclarits1\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\nimport { Autocomplete, Box, IconButton, Stack, TextField } from \"@mui/material\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport \"../App.css\";\nimport { Main } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [result, setResult] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [first, setFirst] = useState(\"\");\n  const [word, setWord] = useState(\"\");\n  const [isValueSelected, setIsValueSelected] = useState(false);\n  function handleChange(e) {\n    setWord(e.target.value);\n  }\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        if (word) {\n          const response = await fetch(`/codes/${word}/matches`);\n          if (response.ok) {\n            const data = await response.json();\n            setResult(data);\n          } else {\n            console.error(\"Failed to fetch data\");\n          }\n        } else {\n          setResult([]);\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [word]);\n  global.values = first;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: \"80px\",\n        position: \"static\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        sx: {\n          margin: \"auto\",\n          color: \"black\",\n          mt: \"20px\"\n        },\n        direction: \"row\",\n        gap: 5,\n        children: /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"users\",\n            defaultValue: null,\n            getOptionLabel: result => `${result.id} ${result.description}`,\n            options: result,\n            sx: {\n              width: \"1450px\",\n              backgroundColor: \"white\",\n              mt: \"14px\",\n              ml: \"130px\",\n              \"& .MuiAutocomplete-inputRoot\": {\n                \"& input\": {\n                  height: \"5px\",\n                  bgcolor: \"background.paper\",\n                  color: theme => theme.palette.getContrastText(theme.palette.background.paper)\n                }\n              }\n            },\n            isOptionEqualToValue: (option, value) => option.description === value.description,\n            noOptionsText: \"PLEASE ENTER VALID CODES\",\n            open: open,\n            onOpen: () => setOpen(true),\n            onClose: () => setOpen(false),\n            popupIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n              disableRipple: true,\n              onClick: () => setOpen(!open),\n              sx: {\n                \"&:hover\": {\n                  cursor: \"default\",\n                  backgroundColor: \"transparent\"\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this),\n            onChange: (event, newValue) => {\n              setFirst(newValue);\n              setIsValueSelected(true);\n            },\n            autoSelect: true,\n            renderOption: (props, result) => /*#__PURE__*/_createElement(Box, {\n              ...props,\n              key: result.id,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }\n            }, result.id, \" \", result.description),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n              ...params,\n              value: word,\n              onChange: handleChange,\n              placeholder: \"Search for code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      isValueSelected: isValueSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Search, \"uOSCpKuapvgyu1oNb46Hhu1Qwug=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["Autocomplete","Box","IconButton","Stack","TextField","React","Fragment","useEffect","useState","SearchIcon","Main","jsxDEV","_jsxDEV","createElement","_createElement","_Fragment","Search","_s","result","setResult","open","setOpen","first","setFirst","word","setWord","isValueSelected","setIsValueSelected","handleChange","e","target","value","fetchBooks","response","fetch","ok","data","json","console","error","global","values","children","sx","height","position","margin","color","mt","direction","gap","id","defaultValue","getOptionLabel","description","options","width","backgroundColor","ml","bgcolor","theme","palette","getContrastText","background","paper","isOptionEqualToValue","option","noOptionsText","onOpen","onClose","popupIcon","disableRipple","onClick","cursor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","newValue","autoSelect","renderOption","props","key","__self","__source","renderInput","params","placeholder","_c","$RefreshReg$"],"sources":["D:/newclarits1/src/components/Search.js"],"sourcesContent":["import { Autocomplete, Box, IconButton, Stack, TextField } from \"@mui/material\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport \"../App.css\";\r\nimport { Main } from \"./Main\";\r\n\r\nconst Search = () => {\r\n  const [result, setResult] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [first, setFirst] = useState(\"\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [isValueSelected, setIsValueSelected] = useState(false);\r\n\r\n  function handleChange(e) {\r\n    setWord(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (word) {\r\n          const response = await fetch(`/codes/${word}/matches`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        } else {\r\n          setResult([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [word]);\r\n\r\n  global.values = first;\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          height: \"80px\",\r\n          position: \"static\",\r\n        }}\r\n      >\r\n        <Stack\r\n          sx={{ margin: \"auto\", color: \"black\", mt: \"20px\" }}\r\n          direction={\"row\"}\r\n          gap={5}\r\n        >\r\n          <Fragment>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              defaultValue={null}\r\n              getOptionLabel={(result) => `${result.id} ${result.description}`}\r\n              options={result}\r\n              sx={{\r\n                width: \"1450px\",\r\n                backgroundColor: \"white\",\r\n                mt: \"14px\",\r\n                ml: \"130px\",\r\n                \"& .MuiAutocomplete-inputRoot\": {\r\n                  \"& input\": {\r\n                    height: \"5px\",\r\n                    bgcolor: \"background.paper\",\r\n                    color: (theme) =>\r\n                      theme.palette.getContrastText(\r\n                        theme.palette.background.paper\r\n                      ),\r\n                  },\r\n                },\r\n              }}\r\n              isOptionEqualToValue={(option, value) =>\r\n                option.description === value.description\r\n              }\r\n              noOptionsText={\"PLEASE ENTER VALID CODES\"}\r\n              open={open}\r\n              onOpen={() => setOpen(true)}\r\n              onClose={() => setOpen(false)}\r\n              popupIcon={\r\n                <IconButton\r\n                  disableRipple\r\n                  onClick={() => setOpen(!open)}\r\n                  sx={{\r\n                    \"&:hover\": {\r\n                      cursor: \"default\",\r\n                      backgroundColor: \"transparent\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <SearchIcon />\r\n                </IconButton>\r\n              }\r\n              onChange={(event, newValue) => {\r\n                setFirst(newValue);\r\n                setIsValueSelected(true);\r\n              }}\r\n              autoSelect\r\n              renderOption={(props, result) => (\r\n                <Box {...props} key={result.id}>\r\n                  {result.id} {result.description}\r\n                </Box>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  value={word}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Search for code\"\r\n                />\r\n              )}\r\n            />\r\n          </Fragment>\r\n        </Stack>\r\n      </Box>\r\n      <Main isValueSelected={isValueSelected} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}