{"ast":null,"code":"var _jsxFileName = \"D:\\\\newclarits1\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\nimport { Autocomplete, Box, IconButton, Stack, TextField } from \"@mui/material\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport \"../App.css\";\nimport { Main } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [result, setResult] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(null);\n  const [isValueSelected, setIsValueSelected] = useState(false);\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        if (selectedValue) {\n          const response = await fetch(`/codes/${selectedValue}/matches`);\n          if (response.ok) {\n            const data = await response.json();\n            setResult(data);\n          } else {\n            console.error(\"Failed to fetch data\");\n          }\n        } else {\n          setResult([]);\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [selectedValue]);\n  const handleInputChange = (event, value) => {\n    setSelectedValue(value);\n    setIsValueSelected(!!value);\n  };\n  const handleClearSelection = () => {\n    setSelectedValue(null);\n    setIsValueSelected(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: \"80px\",\n        position: \"static\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        sx: {\n          margin: \"auto\",\n          color: \"black\",\n          mt: \"20px\"\n        },\n        direction: \"row\",\n        gap: 5,\n        children: /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"users\",\n            value: selectedValue,\n            onChange: handleInputChange,\n            inputValue: selectedValue || \"\",\n            onInputChange: handleInputChange,\n            options: result,\n            getOptionLabel: option => `${option.id} ${option.description}`,\n            noOptionsText: \"PLEASE ENTER VALID CODES\",\n            open: open,\n            onOpen: () => setOpen(true),\n            onClose: () => setOpen(false),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n              ...params,\n              placeholder: \"Search for code\",\n              InputProps: {\n                ...params.InputProps,\n                startAdornment: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": \"search\",\n                  onClick: () => setOpen(true),\n                  size: \"small\",\n                  sx: {\n                    \"&:hover\": {\n                      background: \"none\"\n                    }\n                  },\n                  children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 23\n                }, this),\n                endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [isValueSelected && /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"clear\",\n                    onClick: handleClearSelection,\n                    onMouseDown: event => event.preventDefault(),\n                    size: \"small\",\n                    sx: {\n                      \"&:hover\": {\n                        background: \"none\"\n                      }\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 101,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 27\n                  }, this), params.InputProps.endAdornment]\n                }, void 0, true)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      isValueSelected: isValueSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Search, \"FIzXYok/ljpvhRoLuPfA5TktOeM=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["Autocomplete","Box","IconButton","Stack","TextField","React","Fragment","useEffect","useState","SearchIcon","CloseIcon","Main","jsxDEV","_jsxDEV","_Fragment","Search","_s","result","setResult","open","setOpen","selectedValue","setSelectedValue","isValueSelected","setIsValueSelected","fetchBooks","response","fetch","ok","data","json","console","error","handleInputChange","event","value","handleClearSelection","children","sx","height","position","margin","color","mt","direction","gap","id","onChange","inputValue","onInputChange","options","getOptionLabel","option","description","noOptionsText","onOpen","onClose","renderInput","params","placeholder","InputProps","startAdornment","onClick","size","background","fileName","_jsxFileName","lineNumber","columnNumber","endAdornment","onMouseDown","preventDefault","_c","$RefreshReg$"],"sources":["D:/newclarits1/src/components/Search.js"],"sourcesContent":["import { Autocomplete, Box, IconButton, Stack, TextField } from \"@mui/material\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport \"../App.css\";\r\nimport { Main } from \"./Main\";\r\n\r\nconst Search = () => {\r\n  const [result, setResult] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState(null);\r\n  const [isValueSelected, setIsValueSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (selectedValue) {\r\n          const response = await fetch(`/codes/${selectedValue}/matches`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        } else {\r\n          setResult([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [selectedValue]);\r\n\r\n  const handleInputChange = (event, value) => {\r\n    setSelectedValue(value);\r\n    setIsValueSelected(!!value);\r\n  };\r\n\r\n  const handleClearSelection = () => {\r\n    setSelectedValue(null);\r\n    setIsValueSelected(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          height: \"80px\",\r\n          position: \"static\",\r\n        }}\r\n      >\r\n        <Stack\r\n          sx={{ margin: \"auto\", color: \"black\", mt: \"20px\" }}\r\n          direction=\"row\"\r\n          gap={5}\r\n        >\r\n          <Fragment>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              value={selectedValue}\r\n              onChange={handleInputChange}\r\n              inputValue={selectedValue || \"\"}\r\n              onInputChange={handleInputChange}\r\n              options={result}\r\n              getOptionLabel={(option) => `${option.id} ${option.description}`}\r\n              noOptionsText=\"PLEASE ENTER VALID CODES\"\r\n              open={open}\r\n              onOpen={() => setOpen(true)}\r\n              onClose={() => setOpen(false)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  placeholder=\"Search for code\"\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    startAdornment: (\r\n                      <IconButton\r\n                        aria-label=\"search\"\r\n                        onClick={() => setOpen(true)}\r\n                        size=\"small\"\r\n                        sx={{\r\n                          \"&:hover\": { background: \"none\" },\r\n                        }}\r\n                      >\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    ),\r\n                    endAdornment: (\r\n                      <>\r\n                        {isValueSelected && (\r\n                          <IconButton\r\n                            aria-label=\"clear\"\r\n                            onClick={handleClearSelection}\r\n                            onMouseDown={(event) => event.preventDefault()}\r\n                            size=\"small\"\r\n                            sx={{\r\n                              \"&:hover\": { background: \"none\" },\r\n                            }}\r\n                          >\r\n                            <CloseIcon />\r\n                          </IconButton>\r\n                        )}\r\n                        {params.InputProps.endAdornment}\r\n                      </>\r\n                    ),\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Fragment>\r\n        </Stack>\r\n      </Box>\r\n      <Main isValueSelected={isValueSelected} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}