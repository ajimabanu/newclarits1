[{"D:\\newclarits1\\src\\index.js":"1","D:\\newclarits1\\src\\App.js":"2","D:\\newclarits1\\src\\components\\Codenotes.js":"3","D:\\newclarits1\\src\\components\\Header.js":"4","D:\\newclarits1\\src\\components\\Acc.js":"5","D:\\newclarits1\\src\\components\\ZeroWidthStack.js":"6","D:\\newclarits1\\src\\components\\Main.js":"7","D:\\newclarits1\\src\\components\\Search.js":"8","D:\\newclarits1\\src\\components\\Year.js":"9","D:\\newclarits1\\src\\components\\Codedet.js":"10","D:\\newclarits1\\src\\components\\Sectionnotes.js":"11","D:\\newclarits1\\src\\components\\Chapternotes.js":"12","D:\\newclarits1\\src\\components\\Table2.js":"13","D:\\newclarits1\\src\\components\\Tabeffect.js":"14"},{"size":269,"mtime":1688966578292,"results":"15","hashOfConfig":"16"},{"size":523,"mtime":1688966578286,"results":"17","hashOfConfig":"16"},{"size":1173,"mtime":1689052215043,"results":"18","hashOfConfig":"16"},{"size":917,"mtime":1689244914900,"results":"19","hashOfConfig":"16"},{"size":1747,"mtime":1688966578287,"results":"20","hashOfConfig":"16"},{"size":1542,"mtime":1688966578291,"results":"21","hashOfConfig":"16"},{"size":3338,"mtime":1689317194019,"results":"22","hashOfConfig":"16"},{"size":3951,"mtime":1689061187472,"results":"23","hashOfConfig":"16"},{"size":1867,"mtime":1689244959416,"results":"24","hashOfConfig":"16"},{"size":4032,"mtime":1689052192248,"results":"25","hashOfConfig":"16"},{"size":1799,"mtime":1689052231739,"results":"26","hashOfConfig":"16"},{"size":2500,"mtime":1689310488576,"results":"27","hashOfConfig":"16"},{"size":415,"mtime":1688966578290,"results":"28","hashOfConfig":"16"},{"size":1734,"mtime":1689228841873,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1yfzb1f",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"33"},"D:\\newclarits1\\src\\index.js",[],[],[],"D:\\newclarits1\\src\\App.js",["78","79","80","81"],[],"import { BrowserRouter, Route, Routes } from \"react-router-dom\";\r\nimport Acc from \"./components/Acc\";\r\nimport { Header } from \"./components/Header\";\r\nimport { Main } from \"./components/Main\";\r\n\r\nimport { ZeroWidthStack } from \"./components/ZeroWidthStack\";\r\nimport Codenotes from \"./components/Codenotes\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Header />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\newclarits1\\src\\components\\Codenotes.js",["82"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst Codenotes = () => {\r\n  const [results, setResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n\r\n  console.log(\"our result is\", results);\r\n  \r\n  return (\r\n    <div className=\"codenotes\">\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {results && results.code && (\r\n              <tr key={results.code}>\r\n                <td>{results.longDescription}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Codenotes;\r\n","D:\\newclarits1\\src\\components\\Header.js",["83"],[],"D:\\newclarits1\\src\\components\\Acc.js",[],[],"D:\\newclarits1\\src\\components\\ZeroWidthStack.js",[],[],"D:\\newclarits1\\src\\components\\Main.js",["84","85","86"],[],"D:\\newclarits1\\src\\components\\Search.js",[],[],"D:\\newclarits1\\src\\components\\Year.js",["87","88"],[],"D:\\newclarits1\\src\\components\\Codedet.js",["89"],[],"import { Close } from \"@mui/icons-material\";\r\nimport { Button } from \"@mui/material\";\r\nimport \"../App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Codedet = () => {\r\n  const [result, setResult] = useState(\"\");\r\n  const [isClosed, setIsClosed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n\r\n  const handleClose = () => {\r\n    setIsClosed(true);\r\n    window.location.reload();\r\n  };\r\n\r\n  console.log(\"our result is\", result);\r\n  return (\r\n    <div className=\"division\">\r\n      {!isClosed && global.values && global.values.code && (\r\n        <div>\r\n          <div>\r\n            <Button\r\n              disableFocusRipple\r\n              disableRipple\r\n              sx={{\r\n                border: \"0.5px solid green\",\r\n                textAlign: \"center\",\r\n                height: \"20px\",\r\n                width: \"80px\",\r\n                backgroundColor: \"#ADD8E6\",\r\n                marginLeft: \"125px\",\r\n              }}\r\n            >\r\n              {global.values.code}\r\n              <Close\r\n                sx={{\r\n                  width: \"20px\",\r\n                  ml: \"5px\",\r\n                  color: \"#4169E1\",\r\n                }}\r\n                onClick={handleClose}\r\n              />\r\n            </Button>\r\n          </div>\r\n          <table>\r\n            <thead>\r\n              <tr></tr>\r\n            </thead>\r\n            <tbody>\r\n              {result && (\r\n                <tr key={result.code}>\r\n                  <td>{result.code}</td>\r\n                  <td>{result.longDescription}</td>\r\n                  <td>\r\n                    {result.billable === true ? (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        sx={{\r\n                          width: \"150px\",\r\n                          height: \"15px\",\r\n                          color: \"white\",\r\n                          fontFamily: \"sans-serif\",\r\n                          ml: \"20px\",\r\n                          backgroundColor: \"green\",\r\n                          textTransform: \"lowercase\",\r\n                          fontWeight: \"700px\",\r\n                          textAlign: \"center\",\r\n                          \"&:hover\": {\r\n                            backgroundColor: \"green\",\r\n                          },\r\n                        }}\r\n                      >\r\n                        Billable Codes\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableElevation\r\n                        disableFocusRipple\r\n                        sx={{\r\n                          width: \"150px\",\r\n                          height: \"15px\",\r\n                          color: \"white\",\r\n                          fontFamily: \"sans-serif\",\r\n                          ml: \"170px\",\r\n                          backgroundColor: \"orange\",\r\n                          textTransform: \"lowercase\",\r\n                          fontWeight: \"700px\",\r\n                          textAlign: \"center\",\r\n                          \"&:hover\": {\r\n                            backgroundColor: \"orange\",\r\n                          },\r\n                        }}\r\n                      >\r\n                        NonBillable Codes\r\n                      </Button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Codedet;\r\n","D:\\newclarits1\\src\\components\\Sectionnotes.js",["90"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst Sectionnotes = () => {\r\n  const [results, setResults] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n\r\n  console.log(\"our result is\", results);\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {results && results.section ? (\r\n              <tr key={results.code}>\r\n                <td>{results.section.code}</td>\r\n                <td>{results.section.icdReference}</td>\r\n              </tr>\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={2}></td>\r\n              </tr>\r\n            )}\r\n            {results &&\r\n              results.section &&\r\n              results.section.notes &&\r\n              results.section.notes.length > 0 ? (\r\n              results.section.notes.map((note, index) => (\r\n                <tr key={index}>\r\n                  <td>{note.classifications}</td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={2}>No notes available.</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sectionnotes;\r\n","D:\\newclarits1\\src\\components\\Chapternotes.js",["91"],[],"D:\\newclarits1\\src\\components\\Table2.js",["92"],[],"D:\\newclarits1\\src\\components\\Tabeffect.js",["93","94","95","96"],[],"import React from 'react'\r\nimport  { useState } from 'react';\r\nimport Codenotes from './Codenotes';\r\nimport Sectionnotes from './Sectionnotes';\r\nimport Chapternotes from './Chapternotes';\r\nimport\"../styles/Tabeffect.css\"\r\n\r\nconst Tabeffect = () => {\r\n const [activeSlide, setActiveSlide] = useState(null);\r\n\r\n  // Function to handle slide click\r\n  const handleSlideClick = (slideIndex) => {\r\n    setActiveSlide(slideIndex);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n    \r\n      <div className=\"slides\">\r\n        <div\r\n          className={`slide ${activeSlide === 0 ? 'active' : ''}`}\r\n          onClick={() => handleSlideClick(0)}\r\n        >\r\n          <a href=\"#\">Code notes</a>\r\n          <div className=\"content\">\r\n          <Codenotes/>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`slide ${activeSlide === 1 ? 'active' : ''}`}\r\n          onClick={() => handleSlideClick(1)}\r\n        >\r\n          <a href=\"#\">section notes</a>\r\n          <div className=\"content\">\r\n           <Sectionnotes/>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`slide ${activeSlide === 2 ? 'active' : ''}`}\r\n          onClick={() => handleSlideClick(2)}\r\n        >\r\n          <a href=\"#\">chapter notes</a>\r\n          <div className=\"content\">\r\n           <Chapternotes/>\r\n          </div>\r\n              </div>\r\n         <div\r\n          className={`slide ${activeSlide === 3 ? 'active' : ''}`}\r\n          onClick={() => handleSlideClick(3)}\r\n        >\r\n          <a href=\"#\">chapter Guidelines</a>\r\n          <div className=\"content\">\r\n      No guidelines avilable.\r\n          </div>\r\n              </div>\r\n              \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tabeffect;\r\n",{"ruleId":"97","severity":1,"message":"98","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":11},{"ruleId":"97","severity":1,"message":"101","line":4,"column":10,"nodeType":"99","messageId":"100","endLine":4,"endColumn":14},{"ruleId":"97","severity":1,"message":"102","line":6,"column":10,"nodeType":"99","messageId":"100","endLine":6,"endColumn":24},{"ruleId":"97","severity":1,"message":"103","line":7,"column":8,"nodeType":"99","messageId":"100","endLine":7,"endColumn":17},{"ruleId":"104","severity":1,"message":"105","line":23,"column":6,"nodeType":"106","endLine":23,"endColumn":21,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":24,"column":13,"nodeType":"110","endLine":27,"endColumn":14},{"ruleId":"97","severity":1,"message":"111","line":1,"column":45,"nodeType":"99","messageId":"100","endLine":1,"endColumn":48},{"ruleId":"97","severity":1,"message":"112","line":1,"column":50,"nodeType":"99","messageId":"100","endLine":1,"endColumn":54},{"ruleId":"97","severity":1,"message":"113","line":2,"column":17,"nodeType":"99","messageId":"100","endLine":2,"endColumn":25},{"ruleId":"97","severity":1,"message":"114","line":7,"column":10,"nodeType":"99","messageId":"100","endLine":7,"endColumn":15},{"ruleId":"97","severity":1,"message":"115","line":7,"column":17,"nodeType":"99","messageId":"100","endLine":7,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":27,"column":6,"nodeType":"106","endLine":27,"endColumn":21,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"105","line":23,"column":6,"nodeType":"106","endLine":23,"endColumn":21,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"118","line":22,"column":6,"nodeType":"106","endLine":22,"endColumn":27,"suggestions":"119"},{"ruleId":"97","severity":1,"message":"120","line":1,"column":10,"nodeType":"99","messageId":"100","endLine":1,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":24,"column":11,"nodeType":"110","endLine":24,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":34,"column":11,"nodeType":"110","endLine":34,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":44,"column":11,"nodeType":"110","endLine":44,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":53,"column":11,"nodeType":"110","endLine":53,"endColumn":23},"no-unused-vars","'Acc' is defined but never used.","Identifier","unusedVar","'Main' is defined but never used.","'ZeroWidthStack' is defined but never used.","'Codenotes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'global.values'. Either exclude it or remove the dependency array. Outer scope values like 'global.values' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["123"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Tab' is defined but never used.","'Tabs' is defined but never used.","'useState' is defined but never used.","'first' is assigned a value but never used.","'setFirst' is assigned a value but never used.",["124"],["125"],"React Hook useEffect has an unnecessary dependency: 'global.values.code'. Either exclude it or remove the dependency array. Outer scope values like 'global.values.code' aren't valid dependencies because mutating them doesn't re-render the component.",["126"],"'Typography' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"127","fix":"130"},{"desc":"127","fix":"131"},"Update the dependencies array to be: []",{"range":"132","text":"133"},{"range":"134","text":"133"},{"range":"135","text":"133"},{"range":"136","text":"133"},[676,691],"[]",[830,845],[677,692],[604,625]]